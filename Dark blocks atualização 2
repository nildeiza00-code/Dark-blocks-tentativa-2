-- Teleporte com bypass de colisão para paredes
local player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local pathLength = 10
local stepCount = 8
local stepDelay = 0.06

-- Variáveis para controle
local isTeleporting = false
local lastTeleportTime = 0
local teleportCooldown = 1.2

-- Função para verificar se pode teleportar
local function canTeleport()
    return (tick() - lastTeleportTime) > teleportCooldown and not isTeleporting
end

-- Função para ignorar colisões com segurança
local function safelyIgnoreCollisions(char, ignore)
    if not char then return end
    
    local humanoid = char:FindFirstChild("Humanoid")
    local root = char:FindFirstChild("HumanoidRootPart")
    
    if ignore then
        -- Método 1: Usando PhysicsService para criar colisão personalizada
        local PhysicsService = game:GetService("PhysicsService")
        
        -- Cria colisão personalizada se não existir
        if not PhysicsService:GetCollisionGroupName("TeleportGroup") then
            PhysicsService:CreateCollisionGroup("TeleportGroup")
            PhysicsService:CollisionGroupSetCollidable("TeleportGroup", "Default", false)
        end
        
        -- Aplica a colisão personalizada a todas as partes
        for _, part in pairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
                part.CanTouch = false
                part.CanQuery = false
                PhysicsService:SetPartCollisionGroup(part, "TeleportGroup")
            end
        end
        
        -- Método alternativo: Torna as partes fantasma
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            task.wait(0.05)
        end
    else
        -- Restaura colisões normais
        local PhysicsService = game:GetService("PhysicsService")
        
        for _, part in pairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
                part.CanTouch = true
                part.CanQuery = true
                PhysicsService:SetPartCollisionGroup(part, "Default")
            end
        end
        
        if humanoid and root then
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        end
    end
end

-- Função principal de teleporte
local function WallBypassTeleport()
    if not canTeleport() then return end
    
    isTeleporting = true
    lastTeleportTime = tick()
    
    local char = player.Character
    if not char then
        isTeleporting = false
        return
    end
    
    local root = char:FindFirstChild("HumanoidRootPart")
    local humanoid = char:FindFirstChild("Humanoid")
    
    if not root or not humanoid then 
        isTeleporting = false
        return 
    end

    -- Salva estado original
    local originalPosition = root.Position
    local originalCFrame = root.CFrame
    
    -- 1. Primeiro, verifica se há uma parede à frente
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {char}
    raycastParams.IgnoreWater = true
    
    local rayDirection = root.CFrame.lookVector * (pathLength + 5)
    local raycastResult = workspace:Raycast(root.Position, rayDirection, raycastParams)
    
    local targetPosition = root.Position + (root.CFrame.lookVector * pathLength)
    
    -- Se há uma parede no caminho, ajusta o destino para além dela
    if raycastResult then
        local wallNormal = raycastResult.Normal
        local wallPosition = raycastResult.Position
        
        -- Calcula posição além da parede
        local adjustment = wallNormal * 1.5  -- Pequeno ajuste para passar completamente
        targetPosition = wallPosition + adjustment
    end

    -- 2. Prepara para ignorar colisões
    safelyIgnoreCollisions(char, true)
    
    -- 3. Executa o teleporte em etapas
    local direction = (targetPosition - root.Position).Unit
    local distance = (targetPosition - root.Position).Magnitude
    local steps = math.ceil(distance / (pathLength / stepCount))
    
    for i = 1, steps do
        if not root or not root.Parent then break end
        
        local progress = i / steps
        local stepVector = direction * (distance / steps)
        local newPosition = root.Position + stepVector
        
        -- Move suavemente
        root.CFrame = CFrame.new(newPosition, newPosition + direction)
        
        -- Pequeno delay com variação aleatória
        task.wait(stepDelay * (0.9 + math.random() * 0.2))
    end

    -- 4. Restaura colisões após um pequeno delay
    task.wait(0.1)
    safelyIgnoreCollisions(char, false)
    
    -- 5. Pequeno ajuste final para garantir estabilidade
    task.wait(0.2)
    if root and root.Parent then
        root.Velocity = Vector3.new(0, 0, 0)
        root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        root.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
    end
    
    isTeleporting = false
end

-- Interface do usuário (igual à anterior)
if player.PlayerGui:FindFirstChild("TeleGUI") then
    player.PlayerGui:FindFirstChild("TeleGUI"):Destroy()
end

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TeleGUI"
ScreenGui.Parent = player.PlayerGui

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 160, 0, 50)
Frame.Position = UDim2.new(0.5, -80, 0.85, 0)
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
Frame.BackgroundTransparency = 0.4
Frame.BorderSizePixel = 1
Frame.BorderColor3 = Color3.fromRGB(80, 80, 90)
Frame.AnchorPoint = Vector2.new(0.5, 0)
Frame.Parent = ScreenGui

local Button = Instance.new("TextButton")
Button.Size = UDim2.new(1, -20, 1, -20)
Button.Position = UDim2.new(0, 10, 0, 10)
Button.BackgroundColor3 = Color3.fromRGB(70, 100, 70)
Button.BackgroundTransparency = 0.2
Button.TextColor3 = Color3.fromRGB(220, 255, 220)
Button.Font = Enum.Font.Gotham
Button.TextSize = 16
Button.Text = "ATRAVESSAR"
Button.Parent = Frame

Button.MouseButton1Click:Connect(WallBypassTeleport)

-- Hotkey T
UIS.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.T and canTeleport() then
        WallBypassTeleport()
    end
end)

-- Sistema para ocultar/mostrar a GUI (Shift + P)
UIS.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.P and UIS:IsKeyDown(Enum.KeyCode.LeftShift) then
        ScreenGui.Enabled = not ScreenGui.Enabled
    end
end)

-- Arrastar painel
local dragging, dragInput, dragStart, startPos
Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = Frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)

Frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)
