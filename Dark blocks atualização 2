-- Script Completo: Teleporte Avançado com GUI
-- Este código combina as funções de teleporte e a interface gráfica em um único arquivo.

-- 1. Variáveis e Serviços
local player = game.LocalPlayer
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local PhysicsService = game:GetService("PhysicsService")

-- Configurações do teleporte
local pathLength = 12
local stepCount = 10
local stepDelay = 0.07

-- 2. Funções Essenciais
-- Cria um grupo de colisão personalizado para o bypass do anti-cheat, se ainda não existir.
if not PhysicsService:GetCollisionGroupName("TeleportBypass") then
    PhysicsService:CreateCollisionGroup("TeleportBypass")
    PhysicsService:CollisionGroupSetCollidable("TeleportBypass", "Default", false)
end

-- Gerencia a colisão do personagem, permitindo que ele passe por objetos.
local function disableCollision(character, state)
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            if state then
                part.CanCollide = false
                part.CanTouch = false
                part.CanQuery = false
                PhysicsService:SetPartCollisionGroup(part, "TeleportBypass")
                part.Velocity = Vector3.new(0, 0, 0)
                part.RotVelocity = Vector3.new(0, 0, 0)
            else
                part.CanCollide = true
                part.CanTouch = true
                part.CanQuery = true
                PhysicsService:SetPartCollisionGroup(part, "Default")
            end
        end
    end
end

-- Executa o teleporte em etapas, com bypass de anti-cheat.
local function SmoothTeleport()
    local char = player.Character or player.CharacterAdded:Wait()
    local root = char and char:FindFirstChild("HumanoidRootPart")
    if not root then return end

    task.wait(math.random(10, 30) / 100)

    disableCollision(char, true)

    local randomAngle = math.rad(math.random(-5, 5))
    local dir = (root.CFrame * CFrame.Angles(0, randomAngle, 0)).LookVector
    local targetPos = root.Position + dir * pathLength

    local steps = math.random(8, 12)
    
    for i = 1, steps do
        if not root or not root.Parent then break end
        
        local currentStep = dir * (pathLength / steps) * (0.9 + math.random() * 0.2)
        local newPos = root.Position + currentStep
        
        root.CFrame = CFrame.new(newPos) * CFrame.Angles(
            math.rad(math.random(-2, 2)),
            math.rad(math.random(-3, 3)),
            math.rad(math.random(-2, 2))
        )
        
        task.wait(stepDelay * (0.8 + math.random() * 0.4))
    end

    task.wait(0.1)
    disableCollision(char, false)
    
    if root and root.Parent then
        root.Velocity = Vector3.new(0, 0, 0)
        root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        root.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
    end
end

-- 3. Interface Gráfica (GUI) - Criada diretamente
-- Esta seção foi otimizada para garantir que o painel e o botão apareçam.

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TeleGUI"
ScreenGui.Parent = player:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 180, 0, 60)
Frame.Position = UDim2.new(0.5, -90, 0.8, 0)
Frame.BackgroundColor3 = Color3.fromRGB(33, 33, 40)
Frame.BorderSizePixel = 0
Frame.AnchorPoint = Vector2.new(0.5, 0)
Frame.Parent = ScreenGui
Frame.Active = true
Frame.Draggable = true

local Button = Instance.new("TextButton")
Button.Size = UDim2.new(1, -24, 1, -24)
Button.Position = UDim2.new(0, 12, 0, 12)
Button.BackgroundColor3 = Color3.fromRGB(80, 120, 80)
Button.TextColor3 = Color3.fromRGB(230, 255, 230)
Button.Font = Enum.Font.GothamBold
Button.TextSize = 22
Button.Text = "TELEPORTAR"
Button.Parent = Frame
Button.AutoButtonColor = true

-- 4. Conexões e Hotkeys
Button.MouseButton1Click:Connect(SmoothTeleport)

UIS.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.T then
        SmoothTeleport()
    end
end)
