-- Teleporte avançado com bypass de anti-cheat
local player = game.Players.LocalPlayer
local UIS = game:GetService("UserInputService")
local PhysicsService = game:GetService("PhysicsService")

-- Configurações do teleporte
local pathLength = 12
local stepDelay = 0.07

-- Criar grupo de colisão personalizado se não existir
if not pcall(function() return PhysicsService:GetCollisionGroupName("TeleportBypass") end) then
    PhysicsService:CreateCollisionGroup("TeleportBypass")
    PhysicsService:CollisionGroupSetCollidable("TeleportBypass", "Default", false)
end

-- Função: ligar/desligar colisão
local function disableCollision(character, state)
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            if state then
                part.CanCollide = false
                part.CanTouch = false
                part.CanQuery = false
                PhysicsService:SetPartCollisionGroup(part, "TeleportBypass")
                part.Velocity = Vector3.new(0,0,0)
                part.RotVelocity = Vector3.new(0,0,0)
            else
                part.CanCollide = true
                part.CanTouch = true
                part.CanQuery = true
                PhysicsService:SetPartCollisionGroup(part, "Default")
            end
        end
    end
end

-- Função de teleporte seguro
local function SmoothTeleport()
    local char = player.Character or player.CharacterAdded:Wait()
    local root = char:FindFirstChild("HumanoidRootPart")
    if not root then return end

    task.wait(math.random(10,30)/100)
    disableCollision(char,true)

    local randomAngle = math.rad(math.random(-5,5))
    local dir = (root.CFrame * CFrame.Angles(0,randomAngle,0)).LookVector
    local steps = math.random(8,12)

    for i=1,steps do
        if not root or not root.Parent then break end
        local currentStep = dir * (pathLength/steps) * (0.9+math.random()*0.2)
        local newPos = root.Position + currentStep
        root.CFrame = CFrame.new(newPos) * CFrame.Angles(
            math.rad(math.random(-2,2)),
            math.rad(math.random(-3,3)),
            math.rad(math.random(-2,2))
        )
        task.wait(stepDelay * (0.8+math.random()*0.4))
    end

    task.wait(0.1)
    disableCollision(char,false)
    if root and root.Parent then
        root.Velocity = Vector3.new(0,0,0)
        root.AssemblyLinearVelocity = Vector3.new(0,0,0)
        root.AssemblyAngularVelocity = Vector3.new(0,0,0)
    end
end

-- Criar PlayerGui com painel fixo e botão funcional
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    if playerGui:FindFirstChild("TeleGUI") then
        playerGui.TeleGUI:Destroy()
    end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "TeleGUI"
    screenGui.Parent = playerGui

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0,180,0,60)
    frame.Position = UDim2.new(0,10,0.5,-30) -- Fixo no lado esquerdo
    frame.BackgroundColor3 = Color3.fromRGB(40,40,50)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1,-10,1,-10)
    button.Position = UDim2.new(0,5,0,5)
    button.BackgroundColor3 = Color3.fromRGB(80,120,80)
    button.TextColor3 = Color3.fromRGB(230,255,230)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 22
    button.Text = "TELEPORTAR"
    button.Parent = frame
    button.AutoButtonColor = true

    -- Conexão segura com teleporte
    button.MouseButton1Click:Connect(function()
        local success, err = pcall(SmoothTeleport)
        if not success then
            warn("Erro ao executar teleporte: "..tostring(err))
        end
    end)
end

-- Inicializa GUI
createGUI()

-- Recriar GUI se for removida
player.PlayerGui.ChildRemoved:Connect(function(child)
    if child.Name == "TeleGUI" then
        task.wait(0.3)
        createGUI()
    end
end)

-- Hotkey T para teleporte
UIS.InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.T then
        local success, err = pcall(SmoothTeleport)
        if not success then
            warn("Erro ao executar teleporte: "..tostring(err))
        end
    end
end)
